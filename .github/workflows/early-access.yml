# Inspired by & copied from mthmulders/mcs:
# https://github.com/mthmulders/mcs/blob/main/.github/workflows/early-access.yml
# Itself inspired by & copied from JReleaser sample:
# https://github.com/jreleaser/jreleaser/blob/main/.github/workflows/trigger-early-access.yml

name: Publish Early Access builds
permissions:
  contents: read

on:
  # Triggered after the Build workflow completes successfully
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches: [ main ]

jobs:
  # Collect all executables and release
  release:
    runs-on: ubuntu-24.04
    permissions: write-all
    # Only run if the Build workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v5.0.0
        with:
          java-version: 25
          distribution: 'temurin'
          cache: maven

      # Using third-party action because actions/download-artifact@v5 cannot download from different workflow runs (workflow_run context).
      - name: Download native binary artifacts from Build workflow
        uses: dawidd6/action-download-artifact@v9
        with:
          run_id: ${{ github.event.workflow_run.id }}
          path: /tmp/artifacts
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Move build artifacts to correct folder
        shell: bash
        run: |
          mkdir -p artifacts
          
          # Move all jfmt distribution artifacts to the artifacts directory for JReleaser.
          # The artifacts are already correctly named with platform classifiers by the
          # maven-assembly-plugin using ${os.detected.classifier} from the os-detector extension:
          # - jfmt-VERSION-linux-x86_64.{zip,tar.gz}
          # - jfmt-VERSION-osx-x86_64.zip
          # - jfmt-VERSION-osx-aarch_64.zip
          # - jfmt-VERSION-windows-x86_64.zip
          # These names match the expectations in jreleaser.yml distributions.
          find /tmp/artifacts/ -name "jfmt*" -exec mv -v {} artifacts/ \;

      - name: Cache Maven packages
        uses: actions/cache@v4.3.0
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Release with JReleaser
        shell: bash
        run: |
          mvn \
            --batch-mode \
            -Prelease \
            -DartifactsDir="${GITHUB_WORKSPACE}/artifacts" \
            jreleaser:full-release
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Capture JReleaser output
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: jreleaser-release-output
          retention-days: 7
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
